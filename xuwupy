import base64
import sys

# Base64加密的脚本内容
encoded_script = """"""

# 解密并执行
try:
    decoded_script = base64.b64decode(encoded_script).decode('utf-8')
    exec(decoded_script)
except Exception as e:
    print(f"执行失败：{str(e)}")
    sys.exit(1)
